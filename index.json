[
{
	"uri": "/2-getting-started/2.1-create-a-infrastructure/",
	"title": "Create a Infrastructure    ",
	"tags": [],
	"description": "",
	"content": "Launch Cloud Formation Templates Open Cloud Formation in AWS Console by clicking Launch Cloud Formation In the Amazon S3 Url input the below url https://banka-digitalbanking-test2.finzly.net/api/openbanking/v3/payments/ Click on next Add Stack Name as ipstack In the parameters input FinzlyDataUrl , with copy and paste below string https://banka-digitalbanking-test2.finzly.net/api/openbanking/v3/payments/ GQQVBXQgOZ9mPfklib7dDoCTyQolKKeM https://security-test2.finzly.net/auth/realms/BANKOS-TEST2-BANKA-CUSTOMER/protocol/openid-connect/token 63E2082CEFCD4DC7865164107CF6C256 Click on Submit The stack execution will take around 5 minutes, after the stack creation, the stack status will be complete as showin the screenshot below. "
},
{
	"uri": "/1-introduction/1.1-how-rtp/fednow-work/",
	"title": "How RTP/FedNow work",
	"tags": [],
	"description": "",
	"content": "1. How RTP/FedNow work RTP payments are made between two bank accounts or aliases (e.g., email ID, mobile number) and are initiated and settled within seconds. RTP payments can occur at any time of day, any day of the year, including weekends and holidays.\nWhether it’s a business making a cross-border payment, a worker sending remittances within their own country, or e-commerce consumers making instant transactions, the demand for RTP capabilities is growing.\nHere are the workflows when Finzly is used for instant payment processing.\n"
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Financial institutions have different approaches to adopting instant payments. Some go with their core providers, many are moving towards parallel payment cores like Finzly, which operate as complete ISO 20022- native money movement platform for banks, starting with providing payment initiation experience all the way to clearing and settlement.\nAdopting instant payments offers quicker processing and more options for value-added services through easy API integrations with modern platforms. This allows financial institutions to seamlessly integrate with fintechs, digital platforms, their own digital experiences, and internal applications like lending, mortgages, payroll, bill pay, and other transaction banking offerings.\nSeveral financial institutions also take a modular approach towards moving their entire payment processing under Finzly’s Payment Galaxy – the unified payment processing platform for all rails.\nPayment Galaxy – a true payment hub designed for the instant economy As payment operations become cost centers at financial institutions, increasing operational efficiency by transitioning payment operations to a modern payment processing platform is crucial.\nPayment Galaxy is a complete and modern payment services hub that alleviates the burden of managing multiple systems and vendors. Through a completely centralized payment processing platform for all payment networks including ACH, Fedwire, RTP, FedNow, and Swift, it is the only hub that helps banks centrally process payments while also providing monitoring, reporting, and compliance capabilities.\nAlongside advanced ACH processing featuring open APIs, ACH file processing, and an ISO 20022-native Fedwire platform, banks can also centralize their instant payment processing on this truly real-time platform.\nAdditionally, it offers functionalities such as processing payments for the benefit of (FBO) accounts and managing virtual accounts on a virtual multi-asset, multi-currency ledger. Its single API and user interface for all payment networks set it apart from competitors, enabling the powering of use cases and value-added services.\nPayment Galaxy is available as an easy to launch app from Finzly’s award-winning operating system for banks – FinzlyOS. What are the benefits to financial institutions? Capacity expansion due to the scalable and elastic architecture of cloud platforms\nEvent-driven business rules trigger workflows that support automated decisions\nAutomation of returns/cancellations/request for reversals/callbacks\nReduced errors in processing\nIncreased transparency and visibility of instant payments for bankers and customers\nAbility to tailor workflows and system logic\nElimination of redundant processes in the workflow\nDual controls and security through encryption\nImproved STP rates across different channels because of auto-repair that can fix formatting errors\nReduced payment failures as routing through FedNow and RTP for banks enabled on both\nQuick implementation as connections are already pre-wired to the Fed and TCH\nReduced cost as connections to the networks are certified to the most up-to-date standards without additional cost and effort through SaaS engagement\nProvision of value-added services like Request for Payment through experiences for banks\nProvision of send and receive experience for instant payments\nAbility to integrate the \u0026ldquo;send\u0026rdquo; experience with existing digital banking provider\nAbility to send instant notifications as per customer preferences\nAPIs for all instant payment messages\nEasy integration to sandbox environments\nExtremely strong roadmap with innovative features\nSame solution for RTP and FedNow\nSame experience for RTP and FedNow to send payments\nPricing for instant payments as against RTP/FedNow\nIntegrated real-time fraud management\nScope to centralize payment processing for ACH, Fedwire (ISO 20022), RTP, FedNow, Swift – all on the same platform\n"
},
{
	"uri": "/",
	"title": "Real Time Payments",
	"tags": [],
	"description": "",
	"content": "Real Time Payments Real-time payments, also known as instant payments, are transactions that are processed and settled immediately, typically within seconds. This means that the payment is transferred from the payer\u0026rsquo;s account to the payee\u0026rsquo;s account in real-time, without any delay.\nReal-time payments are made possible by advanced technologies, such as cloud computing, and APIs.\nThese technologies enable fast and secure transactions, allowing individuals and businesses to make and receive payments instantly.\nSome benefits of real-time payments include:\nFaster access to funds: Payees can receive payments immediately, reducing wait times and improving cash flow. Increased convenience: Payments can be made and received at any time, day or night. Reduced fraud: Real-time payments reduce the risk of fraud, as transactions are processed and settled immediately. Improved customer experience: Real-time payments provide a faster and more seamless payment experience for customers. Examples of real-time payment systems include:\nMobile payment apps, such as Apple Pay and Google Pay Online banking and mobile banking apps Real-time payment networks, such as FedNow and The Clearing House\u0026rsquo;s RTP network. Overall, real-time payments offer numerous benefits and are becoming increasingly popular in today\u0026rsquo;s fast-paced digital economy.\nContent Introduction Getting Started Use Cases Cleanup Steps "
},
{
	"uri": "/3-use-cases/3.1-sending-instant-payments/",
	"title": "Sending Instant Payments",
	"tags": [],
	"description": "",
	"content": "You can initiate an instant payment using the simple instructions shown below. Finzly has exposed a single payment API that supports the initiation of various types of payments, both Domestic and International, using the speed preference. If a user would like to initiate an instant payment request, they can choose the speed name as \u0026ldquo;instant\u0026rdquo;.\nThe payment hub applies the smart-routing rules to process and instantly settle the payment via FedNow or RTP payment network. First, Get the auth access token using the \u0026ldquo;API key\u0026rdquo; and \u0026ldquo;API secret\u0026rdquo; provided by the financial institution\nAuth Request\ncurl -X POST [URL] -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -H \u0026#39;Authorization: Basic [Base64(apikey:apisecert)]\u0026#39; -d \u0026#39;grant_type=client_credentials\u0026#39; Auth Response\n{ \u0026#34;access_token\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;expires_in\u0026#34;: 14400, \u0026#34;refresh_expires_in\u0026#34;: 1800, \u0026#34;refresh_token\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;bearer\u0026#34;, } Use access_token to call Finzly Connect APIs.\nExecute an instant payment request [Sender and Receiver are not setup on Finzly]\nPrepare the instant payment request by providing the following payment instructions such as sender details, receiver details, payment amount, notes and set the speed as \u0026ldquo;Instant\u0026rdquo;.\nPOST /payments/creditrequest\nHTTP Method: POST\n{ \u0026#34;externalReferenceId\u0026#34;: \u0026#34;paymentref101\u0026#34;, \u0026#34;paymentAmount\u0026#34;: 100, \u0026#34;paymentCurrency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;speed\u0026#34;: \u0026#34;Instant\u0026#34;, \u0026#34;paymentNotes\u0026#34;: \u0026#34;Notes\u0026#34;, \u0026#34;sender\u0026#34;: { \u0026#34;accountNumber\u0026#34;: \u0026#34;112266\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;subAccountType\u0026#34;: \u0026#34;Checking or Saving\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sender Name\u0026#34;, \u0026#34;bankIdType\u0026#34;: \u0026#34;NID\u0026#34;, \u0026#34;bankId\u0026#34;: \u0026#34;Bank routing number\u0026#34;, \u0026#34;entityType\u0026#34;: \u0026#34;Consumer or Corporate\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Sender Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Sender Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Sender City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Sender State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Sender Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; }, \u0026#34;phone\u0026#34;: \u0026#34;Phone Number (if any)\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;Email Address (if any)\u0026#34; }, \u0026#34;receiver\u0026#34;: { \u0026#34;accountNumber\u0026#34;: \u0026#34;Receiver account number\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;subAccountType\u0026#34;: \u0026#34;Checking or Savings\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Receiver Name\u0026#34;, \u0026#34;accountCurrency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Receiver Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Receiver Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Receiver City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Receiver State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Receiver Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; }, \u0026#34;phone\u0026#34;: \u0026#34;Phone Number (if any)\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;Email Address (if any)\u0026#34;, \u0026#34;bank\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Bank Name\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;US\u0026#34;, \u0026#34;bankIdType\u0026#34;: \u0026#34;NID\u0026#34;, \u0026#34;bankId\u0026#34;: \u0026#34;Routing Number\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Receiver Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Receiver Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Receiver City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Receiver State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Receiver Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; } } } } In the UI, Click on CREDIT Transfer on the left-hand sise. On right-hand side, click on Send New. Fill in the pop-up box Send New Credit Trander with the values and click on Send. "
},
{
	"uri": "/1-introduction/1.2-when-to-use-real-time-payments/",
	"title": "When to use Real-Time Payments",
	"tags": [],
	"description": "",
	"content": "1. When to use Real-Time Payments The majority of institutions currently using FedNow are set to \u0026lsquo;receive only,\u0026rsquo; despite the potential benefits of adopting a sending solution. Finzly offers the ability to send instant payments, providing a comprehensive payment solution.\nAdditionally, the Finzly Connect API has been designed to cater to a wide array of industry use cases, enabling frictionless payment experiences in platforms, fintechs, and developer applications.\nSample use cases:\nReceive payments: Earned Wage Access using “receive” One type of receive transaction that benefits financial institutions is earned wage access. Historically this was associated with the gig economy but has started to be utilized in other industries. Customers can bypass the traditional wait and access earned shift income immediately.\nReceive payments with “Request for payment”: Gig payments When a shift worker finishes his shift, or a lawnmower has finished his job, he can request payment so that the funds can be instantly received into his account. For the early wage access in use case 1, it can also be made “on-demand access”. \u0026ldquo;Request for Pay\u0026rdquo; empowers customers to request a portion of wages whenever needed, reducing reliance on predatory loans.\nReceive payments: Government and municipal payments Businesses and individuals can receive tax returns in real-time through instantly sent G2C payments as the treasury is also moving towards employing FedNow for paying businesses and individuals. Time-sensitive payments like disaster relief, social benefits can also be received instantly.\nSend payments: B2B payments Businesses can free up working capital by paying suppliers upon receipt of products or services.\nReceive payments with “Request for payment”: Supplier payments Businesses can send an e-invoice and a request for payment that includes all the information they will need when their customer remits the requested payment.\nSend payments: Disburse instant wages to employees Banks can attract fintechs, payroll processing platforms, corporate payroll processing to help them set up early wage access to their employees using our send, receive and virtual account APIs similar to what banks like PNC offer.\nIntegrated solutions with employers to integrate instant payment API for seamless wage disbursement. Co-branded offerings for joint instant wage access programs with specific employers. Fintech partnerships with EWA fintech platforms, providing API infrastructure Payroll service collaboration with payroll providers to offer instant wage access as an add-on service, leveraging existing relationships.\nSend and receive payments, RfP: Insurance payments If your bank deals with Home, auto, travel, pet, health insurance segments, Finzly Connect APIs can help you build seamless experiences to settle claims, collect premium payments or recover debts. Banks can also attract insurance platforms to help them differentiate by offering “getting insured in seconds” or “getting claims settled in seconds” using our instant payment APIs.\nFor instance, you can instantly:\nDisburse claim payments Collect premium payments Recover debts\nSend and receive payments: Lending Whether it is automobile, mortgage, or whatever lending is managed from your internal platforms, disburse and collect payments to/from borrowers from your lending platform using Finzly Connect APIs.\nDisbursement of loans Ad hoc pulling of monthly payment from borrower bank account Schedule pulling of payments once or on a recurring basis\nSend and receive payments, RfP: Healthcare Drive more revenue by powering the accounts and payments of neobanks like Square, Brex, Dave etc. by helping them\nSet up and manage virtual accounts of their customers Payment APIs Multicurrency accounts Instant payments powered deposit accounts Instant account and digital wallet top-up\nSend and receive payments, RfP: Neobanks/Fintechs Drive more revenue by powering the accounts and payments of neobanks like Square, Brex, Dave etc. by helping them\nSet up and manage virtual accounts of their customers Payment APIs Multicurrency accounts Instant payments powered deposit accounts Instant account and digital wallet top-up\nSend and receive payments, RfP: Community payments Charity platforms can accept donations directly from customers’ bank accounts on their payment forms. Your customers can accept Request for Payment links through QR code or payment links that come to their digital banking experience. You can also provide APIs to help charity platforms with:\nInstant bank transfers Set up donation payments Collect one-off and recurring social benefits\nSend and receive payments, RfP: Utility bill payments Help utility companies to raise invoices through request for payment. Your customers can also receive such RfPs and pay the utility bills instantly, even setting up recurring payments.\nFor utility companies:\nSet up customers using virtual accounts Request bill payments For customers:\nReceive bill payment requests Pay bills instantly Set up recurring bill payments\n"
},
{
	"uri": "/2-getting-started/2.2-build-apis/",
	"title": "Build APIs ",
	"tags": [],
	"description": "",
	"content": "Please download the UI_Build.zip From here into your local machine.\nUncompress the UI_Build.zip. It should create a folder UI_Build like below Open the file api.json inside the UIBuild folder in your favorite editor From the AWS console navigate to the API Gateway service and you will see the list of APIs like listed below Click on instantPaymentApis API. On left-hand menu, click on stages. Click on prod. Copy the Invoke URL and paste it in api.json file under INSTANT_API key\nPlease copy the entire Invoke URL by selecting from below\napi.json file should like below\nNow, go inside the UI_Build folder. Select all the files, folders and then do zip/compress as shown below\nCompress all to file .zip\nThe final zip file should be under UIBuild.zip as shown below "
},
{
	"uri": "/2-getting-started/",
	"title": "Getting Started ",
	"tags": [],
	"description": "",
	"content": "Before you can use the resources in the lab environment, you need to complete a few steps.\nFor this event you will be provided an AWS account through a platform called Workshop Studio, and the lab environment has already been deployed in that account for you.\nNote: This workshop can only be completed during an AWS-run event. All resources will be removed at the end of the event as the accounts provided will terminate when the event is over, but clean up steps can be found in the Clean Up section.\nPlease follow the below onboarding steps if you fall under any of the criteria below:\nRTP - Onboarding of Bank into RTP network\nOnboarding Package\nImplementation kickoff meeting and review Onboarding Documentation Security\nComplete and return Security Form and Application Admin form RSA Tokens Submit Profile Application - This indicates the Participant Bank’s Profile - Receive only, Send \u0026amp; Receive\nLiquidity management (Funding Agent) profile\nMaster A/c with Federal Reserve Use of Correspondent Account Routing Number assigned to RTP payments\nExisting or New RTN decision RTP Bank Test and configuration\nConfigure Participant Create Participant Admin Users Bank Test (Pre-cert \u0026amp; Participant Test)\nRTP Production Configuration\nConfigure Participant Create Participant Admin Users Submit Funding Letter to Federal Reserve\nFederal reserve Approval required Go -Live\nBank onboarding into Finzly for RTP\nBank Core Integration\nOnboarding of Customers of Bank (Optional) if they do not use our digital banking experience\nReal time validation to maintain SLA\n24/7/365 support of Payments\nReal time core posting (Posting to customer’s Account)\nEOD GL posting\nOFAC and Compliance integration based on the Participant Profile\nReceive Only - No OFAC and FRAUD Send - OFAC and FRAUD integration Transaction reporting\nRTP ABA routing services\nHandling the connections and maintaining queues\nFedNow- Onboarding of Bank into Fed network\nFedNow Implementation - Service Provider \u0026amp; Financial institution\nSettlement - FedNow transactions must settle in a Master Account. FedNow allows for depository institutions to settle in their own master account or use a correspondent for settlement purposes. Participant Profile Management: As part of the FedNow Service, a participant that owns a FedNow profile must manage the profile via the FedNow User Interface. This can be done directly via the profile owner (FI) or delegated out to another party (SP) or both; determined by the profile owner. This is Handled through Fedline advantage Onboarding Scenario for a Service Provider adding a downstream FI:\nWhen an agreement is in place between the service provider to provide ISO messaging for the participant\nParticipant will use their own Master Account or a Correspondent will settle transactions for the participant\nService provider will be managing the participants profile in the FedLine FedNow User Interface (UI). 3.Forms Needed:\nOC-8 Appendix A – to be signed by participant ONLY.\nOC-8 Appendix B – to be signed by both service provider and the participant.\nOC-1 Appendix 2- Correspondent/Respondent Agreement – to be signed by both the Settlement Correspondent and participant. Not needed if the participant will be using their current MASTER Account\nParticipant Profile Workbook – No signatures needed; an EUAC at the service provider’s institution will complete and return the workbook to FRB via email.\nProfile Management could be accomplished by participant and/or Service Provide.\nParticipant Operational Attestation – Email from participant with attestation of readiness based on FedNow requirements.\nFedNow Customer Contact List\nOPTIONAL AIS-6 Affiliate Access for Account Management Information (AMI) Service – to be signed by both Service Provider and the Participant if the Service Provider is being granted access to Participant’s Account Management Information – optional depending on SP/FI processing relationship.\nFedNow Participant Profile Form\nThis form indicates the Participant service as: Receive only Send \u0026amp; Receive RFP LMT instructions (Funding agent to be used or not)\nBank onboarding into Finzly for RTP\nBank Core Integration\nOnboarding of Customers of Bank (Optional) if they do not use our digital banking experience\nReal time validation to maintain SLA\n24/7/365 support of Payments\nReal time core posting (Posting to customer’s Account)\nEOD GL posting\nOFAC and Compliance integration based on the Participant Profile\nReceive Only - No OFAC and FRAUD Send - OFAC and FRAUD integration Transaction reporting\nFedNow ABA routing services\nHandling the connections and maintaining queues\nThere are a few steps you\u0026rsquo;ll need to perform to get access to your account - please select Next below to get started.\n"
},
{
	"uri": "/3-use-cases/3.2-schedule-recurring-instant-payment/",
	"title": "Schedule Recurring Instant Payment",
	"tags": [],
	"description": "",
	"content": "Prepare the payment request object using the sender, receiver, recurrence information along with the speed associated with the payment.\nPOST /payments/creditrequest\nHTTP Method: POST\n{ \u0026#34;externalReferenceId\u0026#34;: \u0026#34;PaymentRef100\u0026#34;, \u0026#34;paymentAmount\u0026#34;: 15.00, \u0026#34;paymentCurrency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;speed\u0026#34;: \u0026#34;Instant\u0026#34;, \u0026#34;paymentNotes\u0026#34;: \u0026#34;Payment for invoice #123 \u0026#34;, \u0026#34;sender\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Funding Account\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;112233\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;subAccountType\u0026#34;: \u0026#34;Savings\u0026#34;, \u0026#34;entityType\u0026#34;: \u0026#34;Corporate\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Sender Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Sender Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Sender City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Sender State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Sender Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; }, \u0026#34;bankIdType\u0026#34;: \u0026#34;NID\u0026#34;, \u0026#34;bankId\u0026#34;: \u0026#34;Bank ID\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;Phone Number\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;email@domain.com\u0026#34; }, \u0026#34;receiver\u0026#34;: { \u0026#34;accountNumber\u0026#34;: \u0026#34;Receiver account number\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;XYZ Account\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;accountCurrency\u0026#34;:\u0026#34;USD\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Receiver Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Receiver Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Receiver City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Receiver State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Receiver Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; }, \u0026#34;phone\u0026#34;: \u0026#34;Phone Number(if any)\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;Email Address (if any)\u0026#34;, \u0026#34;bank\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Bank Name\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;US\u0026#34;, \u0026#34;bankIdType\u0026#34;: \u0026#34;NID\u0026#34;, \u0026#34;bankId\u0026#34;: \u0026#34;Routing Number\u0026#34;, } }, \u0026#34;recurrence\u0026#34;: { \u0026#34;frequency\u0026#34;: \u0026#34;daily\u0026#34;, \u0026#34;payUntil\u0026#34;: \u0026#34;endDate\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;04-15-2024\u0026#34;, \u0026#34;numberOfPayments\u0026#34;: 5 }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;localInstruments\u0026#34;: \u0026#34;FDNA\u0026#34;, \u0026#34;referenceForBeneficiary\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;proprietaryCode\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;originatortoBeneficiary\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;senderToReceiverNote\u0026#34;: \u0026#34;\u0026#34; } } "
},
{
	"uri": "/2-getting-started/2.3-deploy-in-amplify/",
	"title": "Deploy in Amplify ",
	"tags": [],
	"description": "",
	"content": " From the AWS console navigate to the AWS Amplify service. Click on Get Started\nIn the Manual Deployment Amplify will start deploying. After UI is built, you will be given a Domain to test testing UI. In the Rewrites and redirects page, click on Manage Redirects button In the source address, copy and paste below string \u0026lt;/^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|woff2|ttf|map|json|webp)$)([^.]+$)/\u0026gt; In the Target address, copy and paste below /index.html "
},
{
	"uri": "/3-use-cases/3.3-request-for-payment/",
	"title": "Request for Payment",
	"tags": [],
	"description": "",
	"content": "Customers can request for Payment by sending a POST request to /payments/debitrequest\nJSON Response\nA successful POST request to this endpoint returns the following data -\nSuccess Code - 200\nAuth Request\n{ \u0026#34;externalReferenceId\u0026#34;: \u0026#34;paymentrequest87867\u0026#34;, \u0026#34;paymentAmount\u0026#34;: 20.00, \u0026#34;paymentCurrency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;speed\u0026#34;: \u0026#34;Instant\u0026#34;, \u0026#34;paymentNotes\u0026#34;: \u0026#34;Request for Invoice #29029 Payment\u0026#34;, \u0026#34;creditor\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Funding Account\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;112233\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;subAccountType\u0026#34;: \u0026#34;Savings\u0026#34;, \u0026#34;entityType\u0026#34;: \u0026#34;Corporate\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Sender Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Sender Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Sender City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Sender State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Sender Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; }, \u0026#34;bankIdType\u0026#34;: \u0026#34;NID\u0026#34;, \u0026#34;bankId\u0026#34;: \u0026#34;011053839\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;18001236754\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;email@domain.com\u0026#34; }, \u0026#34;debtor\u0026#34;: { \u0026#34;accountNumber\u0026#34;: \u0026#34;110088\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;XYZ Account\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;accountCurrency\u0026#34;:\u0026#34;USD\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;addressLine1\u0026#34;: \u0026#34;Receiver Address 1\u0026#34;, \u0026#34;addressLine2\u0026#34;: \u0026#34;Receiver Address 2\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Receiver City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Receiver State Name\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;Receiver Postal Code\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;Country Code\u0026#34; }, \u0026#34;phone\u0026#34;: \u0026#34;18001236754\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;info@finzly.com\u0026#34;, \u0026#34;bank\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;BANK OF AMERICA, N.A.\u0026#34;, \u0026#34;countryCode\u0026#34;: \u0026#34;US\u0026#34;, \u0026#34;bankIdType\u0026#34;: \u0026#34;NID\u0026#34;, \u0026#34;bankId\u0026#34;: \u0026#34;011053839\u0026#34; } }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;localInstruments\u0026#34;: \u0026#34;FDNA\u0026#34;, \u0026#34;requestedExecutionDate\u0026#34;: \u0026#34;03-05-2024\u0026#34;, \u0026#34;expiryDate\u0026#34;: \u0026#34;04-06-2024\u0026#34;, \u0026#34;amountModificationAllowed\u0026#34;: true, \u0026#34;earlyPayment\u0026#34;: false } } In the UI, Click on Request for Payment on the left-hand side. On right-hand side, click on Send New. Fill in the pop-up box Send New Credit Trander with the values and click on Send. On Success, a new RFP is initiated. "
},
{
	"uri": "/3-use-cases/",
	"title": "Use Cases",
	"tags": [],
	"description": "",
	"content": " On clicking the domain url in Amplify, you will see a page to login like below. Please type any alphabets for Email Id and Password to login "
},
{
	"uri": "/4-cleanup-steps/",
	"title": "Cleanup Steps",
	"tags": [],
	"description": "",
	"content": "If You are doing this workshop at an AWS event, you don\u0026rsquo;t need to clean up the resources Following are steps for cleanup:\nFrom the AWS console navigate to the Amplify service and click on App settings \u0026gt; General settings \u0026gt; Delete app The status of the stack will be deleted once the deletion is complete. "
},
{
	"uri": "/3-use-cases/3.4-search-payments/",
	"title": "Search Payments",
	"tags": [],
	"description": "",
	"content": "Sending a GET Request to /payments/{paymentUID} endpoint allows users to retrieve payment details using payment uid in the path of the API request. All the request parameters and objects are specified below:\nRequest Parameters\nJSON Response\nA successful GET request to this endpoint returns the following data -\nSuccess Code - 200\nAuth Request\n{ \u0026#34;status\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;code\u0026#34;: null, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: { \u0026#34;paymentUID\u0026#34;: 188456, \u0026#34;externalReferenceId\u0026#34;: \u0026#34;6008705A67A443ED81A890E0EDA15413\u0026#34;, \u0026#34;sourceReferenceId\u0026#34;: null, \u0026#34;senderCurrency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;senderAmount\u0026#34;: 23.00, \u0026#34;receiverCurrency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;receiverAmount\u0026#34;: 23.00, \u0026#34;entryType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;paymentDate\u0026#34;: \u0026#34;2024-03-18\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;PROCESSED\u0026#34;, \u0026#34;deliveryMethod\u0026#34;: \u0026#34;FEDNOW\u0026#34;, \u0026#34;paymentNotes\u0026#34;: \u0026#34;Sending money...\u0026#34;, \u0026#34;channel\u0026#34;: \u0026#34;API\u0026#34;, \u0026#34;costCenter\u0026#34;: \u0026#34;Payment\u0026#34;, \u0026#34;book\u0026#34;: \u0026#34;GALAXYOUTGOING\u0026#34;, \u0026#34;wireType\u0026#34;: \u0026#34;OUTGOING_PAYMENT\u0026#34;, \u0026#34;counterPartyId\u0026#34;: \u0026#34;907\u0026#34;, \u0026#34;counterParty\u0026#34;: \u0026#34;Company Name\u0026#34;, \u0026#34;customerType\u0026#34;: \u0026#34;Corporate\u0026#34;, \u0026#34;businessUnitId\u0026#34;: \u0026#34;846\u0026#34;, \u0026#34;businessUnit\u0026#34;: \u0026#34;BANKA\u0026#34;, \u0026#34;senderAccountUID\u0026#34;: \u0026#34;1365\u0026#34;, \u0026#34;senderName\u0026#34;: \u0026#34;Priyanka Corporate LE\u0026#34;, \u0026#34;senderAccountName\u0026#34;: \u0026#34;Dollar FedNow Account\u0026#34;, \u0026#34;senderAccountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;senderAccountSubType\u0026#34;: \u0026#34;Checking\u0026#34;, \u0026#34;senderAccountNumber\u0026#34;: \u0026#34;112233\u0026#34;, \u0026#34;senderAddress1\u0026#34;: \u0026#34;address 1\u0026#34;, \u0026#34;senderAddress2\u0026#34;: \u0026#34;address 2\u0026#34;, \u0026#34;senderCity\u0026#34;: \u0026#34;City\u0026#34;, \u0026#34;senderState\u0026#34;: \u0026#34;state\u0026#34;, \u0026#34;senderZip\u0026#34;: \u0026#34;26511\u0026#34;, \u0026#34;senderCountry\u0026#34;: \u0026#34;UNITED STATES OF AMERICA\u0026#34;, \u0026#34;senderCountryCode\u0026#34;: null, \u0026#34;senderBankId\u0026#34;: \u0026#34;Routing Number\u0026#34;, \u0026#34;senderBankName\u0026#34;: \u0026#34;FEDNOW SERVICE PROVIDER 21\u0026#34;, \u0026#34;senderBankIdType\u0026#34;: \u0026#34;BY NID\u0026#34;, \u0026#34;senderBankAddress1\u0026#34;: null, \u0026#34;senderBankAddress2\u0026#34;: null, \u0026#34;senderBankCity\u0026#34;: null, \u0026#34;senderBankState\u0026#34;: null, \u0026#34;senderBankZip\u0026#34;: null, \u0026#34;senderBankCountry\u0026#34;: \u0026#34;UNITED STATES OF AMERICA\u0026#34;, \u0026#34;senderEmail\u0026#34;: \u0026#34;email@domain.com\u0026#34;, \u0026#34;intermediarySenderName\u0026#34;: null, \u0026#34;intermediarySenderAddress1\u0026#34;: null, \u0026#34;intermediarySenderAddress2\u0026#34;: null, \u0026#34;intermediarySenderCity\u0026#34;: null, \u0026#34;intermediarySenderState\u0026#34;: null, \u0026#34;intermediarySenderZip\u0026#34;: null, \u0026#34;intermediarySenderCountry\u0026#34;: null, \u0026#34;intermediarySenderId\u0026#34;: null, \u0026#34;intermediarySenderIdType\u0026#34;: null, \u0026#34;ultimateSenderTaxId\u0026#34;: null, \u0026#34;ultimateSenderName\u0026#34;: null, \u0026#34;ultimateSenderAccountNumber\u0026#34;: null, \u0026#34;ultimateSenderAddress1\u0026#34;: null, \u0026#34;ultimateSenderAddress2\u0026#34;: null, \u0026#34;ultimateSenderCity\u0026#34;: null, \u0026#34;ultimateSenderState\u0026#34;: null, \u0026#34;ultimateSenderZip\u0026#34;: null, \u0026#34;ultimateSenderCountry\u0026#34;: null, \u0026#34;fboAccountName\u0026#34;: null, \u0026#34;fboAccountNumber\u0026#34;: null, \u0026#34;fboAccountType\u0026#34;: null, \u0026#34;receiverName\u0026#34;: \u0026#34;XYZ Account\u0026#34;, \u0026#34;receiverAccountType\u0026#34;: \u0026#34;Deposit\u0026#34;, \u0026#34;receiverAccountSubType\u0026#34;: \u0026#34;CHECKING\u0026#34;, \u0026#34;receiverAccountNumber\u0026#34;: \u0026#34;110088\u0026#34;, \u0026#34;receiverType\u0026#34;: null, \u0026#34;receiverPhoneNumber\u0026#34;: \u0026#34;18001236754\u0026#34;, \u0026#34;receiverEmail\u0026#34;: \u0026#34;info@finzly.com\u0026#34;, \u0026#34;receiverAddress1\u0026#34;: \u0026#34;1250 Lane\u0026#34;, \u0026#34;receiverAddress2\u0026#34;: null, \u0026#34;receiverCity\u0026#34;: \u0026#34;Charlotte\u0026#34;, \u0026#34;receiverState\u0026#34;: \u0026#34;North Carolina\u0026#34;, \u0026#34;receiverZip\u0026#34;: \u0026#34;28269\u0026#34;, \u0026#34;receiverCountry\u0026#34;: \u0026#34;UNITED STATES OF AMERICA\u0026#34;, \u0026#34;receiverBankId\u0026#34;: \u0026#34;011053839\u0026#34;, \u0026#34;receiverBankIdType\u0026#34;: \u0026#34;BY NID\u0026#34;, \u0026#34;receiverBankName\u0026#34;: \u0026#34;FEDNOW SERVICE PROVIDER 21\u0026#34;, \u0026#34;receiverBankAddress1\u0026#34;: null, \u0026#34;receiverBankAddress2\u0026#34;: null, \u0026#34;receiverBankCity\u0026#34;: null, \u0026#34;receiverBankState\u0026#34;: null, \u0026#34;receiverBankZip\u0026#34;: null, \u0026#34;receiverBankCountry\u0026#34;: \u0026#34;UNITED STATES OF AMERICA\u0026#34;, \u0026#34;intermediaryReceiverName\u0026#34;: null, \u0026#34;intermediaryReceiverId\u0026#34;: null, \u0026#34;intermediaryReceiverIdType\u0026#34;: null, \u0026#34;intermediaryReceiverAddress1\u0026#34;: null, \u0026#34;intermediaryReceiverAddress2\u0026#34;: null, \u0026#34;intermediaryReceiverCity\u0026#34;: null, \u0026#34;intermediaryReceiverState\u0026#34;: null, \u0026#34;intermediaryReceiverZip\u0026#34;: null, \u0026#34;intermediaryReceiverCountry\u0026#34;: null, \u0026#34;ultimateReceiverName\u0026#34;: null, \u0026#34;ultimateReceiverAccountNumber\u0026#34;: null, \u0026#34;ultimateReceiverTaxId\u0026#34;: null, \u0026#34;ultimateReceiverAddress1\u0026#34;: null, \u0026#34;ultimateReceiverAddress2\u0026#34;: null, \u0026#34;ultimateReceiverCity\u0026#34;: null, \u0026#34;ultimateReceiverState\u0026#34;: null, \u0026#34;ultimateReceiverZip\u0026#34;: null, \u0026#34;ultimateReceiverCountry\u0026#34;: null, \u0026#34;quoteId\u0026#34;: null, \u0026#34;forexContract\u0026#34;: null, \u0026#34;deliveryAgentType\u0026#34;: \u0026#34;GL\u0026#34;, \u0026#34;fedWireDetails\u0026#34;: null, \u0026#34;intermediarySender\u0026#34;: false, \u0026#34;intermediaryReceiver\u0026#34;: false, \u0026#34;fee\u0026#34;: [ { \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;amount\u0026#34;: 1.00, \u0026#34;feeName\u0026#34;: \u0026#34;Instant\u0026#34; } ], \u0026#34;recurrence\u0026#34;: { \u0026#34;paymentOccurrenceId\u0026#34;: null, \u0026#34;amount\u0026#34;: null, \u0026#34;frequency\u0026#34;: null, \u0026#34;startDate\u0026#34;: null, \u0026#34;endDate\u0026#34;: null, \u0026#34;payUntil\u0026#34;: null, \u0026#34;endAmount\u0026#34;: null, \u0026#34;endNumberPayments\u0026#34;: null, \u0026#34;status\u0026#34;: null }, \u0026#34;audit\u0026#34;: null, \u0026#34;creationDateTime\u0026#34;: \u0026#34;2024-03-18T15:48:51\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;BANKA-API-Test2\u0026#34; } } In the UI, Click on Transactions on the left-hand side. It will display the list of transactions processed. Copy the Finzly ID, and on left hand side click on Search a Payment. In the search box paste the Finzly ID to search. It will list the details of the transaction. Also, can view the transactions in the Dashboard. "
},
{
	"uri": "/3-use-cases/3.5-return-of-funds/",
	"title": "Return of Funds",
	"tags": [],
	"description": "",
	"content": "You can return a payment using this API if the payment rail supports the return of payments.\nPUT/payments/{paymentUID}/return\nHTTP Method: PUT\nSending a PUT request to \u0026ldquo;/payments/{paymentUID}/return\u0026rdquo; endpoint allows users to return a payment. All the request parameters and objects are specified below\nRequest Parameters JSON Response\nSuccess Code - 200\n{ \u0026#34;status\u0026#34;: \u0026#34;Success or Failure\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;PAYMENT003 etc.\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Failed to return a payment: \u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;paymentUID\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34; } } In the UI, Click on Transactions on the left-hand side. It will display the list of transactions processed. Copy the Finzly ID, and on left hand side click on Return of Funds. In the search box paste the Finzly ID to send. "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]